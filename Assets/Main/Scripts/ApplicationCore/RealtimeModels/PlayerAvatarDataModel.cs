using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Main.Scripts.ApplicationCore.RealtimeModels
{
    [RealtimeModel]
    public partial class PlayerAvatarDataModel
    {
        [RealtimeProperty(1, true )] private string _username;
        [RealtimeProperty(2, true )] private float _height;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Main.Scripts.ApplicationCore.RealtimeModels {
    public partial class PlayerAvatarDataModel : RealtimeModel {
        public string username {
            get {
                return _usernameProperty.value;
            }
            set {
                if (_usernameProperty.value == value) return;
                _usernameProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public float height {
            get {
                return _heightProperty.value;
            }
            set {
                if (_heightProperty.value == value) return;
                _heightProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public enum PropertyID : uint {
            Username = 1,
            Height = 2,
        }
        
        #region Properties
        
        private ReliableProperty<string> _usernameProperty;
        
        private ReliableProperty<float> _heightProperty;
        
        #endregion
        
        public PlayerAvatarDataModel() : base(null) {
            _usernameProperty = new ReliableProperty<string>(1, _username);
            _heightProperty = new ReliableProperty<float>(2, _height);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _usernameProperty.UnsubscribeCallback();
            _heightProperty.UnsubscribeCallback();
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _usernameProperty.WriteLength(context);
            length += _heightProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _usernameProperty.Write(stream, context);
            writes |= _heightProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.Username: {
                        changed = _usernameProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.Height: {
                        changed = _heightProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _username = username;
            _height = height;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
