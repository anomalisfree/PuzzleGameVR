using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Main.Scripts.ApplicationCore.RealtimeModels
{
    [RealtimeModel]
    public partial class PuzzlePieceDataModel
    {
        [RealtimeProperty(1, true )] private int _num;
        [RealtimeProperty(2, true )]  private bool _inFrame;
        [RealtimeProperty(3, true )] private float _rot;
        [RealtimeProperty(4, true )] private bool _isCorrect;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Main.Scripts.ApplicationCore.RealtimeModels {
    public partial class PuzzlePieceDataModel : RealtimeModel {
        public int num {
            get {
                return _numProperty.value;
            }
            set {
                if (_numProperty.value == value) return;
                _numProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public bool inFrame {
            get {
                return _inFrameProperty.value;
            }
            set {
                if (_inFrameProperty.value == value) return;
                _inFrameProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public float rot {
            get {
                return _rotProperty.value;
            }
            set {
                if (_rotProperty.value == value) return;
                _rotProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public bool isCorrect {
            get {
                return _isCorrectProperty.value;
            }
            set {
                if (_isCorrectProperty.value == value) return;
                _isCorrectProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public enum PropertyID : uint {
            Num = 1,
            InFrame = 2,
            Rot = 3,
            IsCorrect = 4,
        }
        
        #region Properties
        
        private ReliableProperty<int> _numProperty;
        
        private ReliableProperty<bool> _inFrameProperty;
        
        private ReliableProperty<float> _rotProperty;
        
        private ReliableProperty<bool> _isCorrectProperty;
        
        #endregion
        
        public PuzzlePieceDataModel() : base(null) {
            _numProperty = new ReliableProperty<int>(1, _num);
            _inFrameProperty = new ReliableProperty<bool>(2, _inFrame);
            _rotProperty = new ReliableProperty<float>(3, _rot);
            _isCorrectProperty = new ReliableProperty<bool>(4, _isCorrect);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _numProperty.UnsubscribeCallback();
            _inFrameProperty.UnsubscribeCallback();
            _rotProperty.UnsubscribeCallback();
            _isCorrectProperty.UnsubscribeCallback();
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _numProperty.WriteLength(context);
            length += _inFrameProperty.WriteLength(context);
            length += _rotProperty.WriteLength(context);
            length += _isCorrectProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _numProperty.Write(stream, context);
            writes |= _inFrameProperty.Write(stream, context);
            writes |= _rotProperty.Write(stream, context);
            writes |= _isCorrectProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.Num: {
                        changed = _numProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.InFrame: {
                        changed = _inFrameProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.Rot: {
                        changed = _rotProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.IsCorrect: {
                        changed = _isCorrectProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _num = num;
            _inFrame = inFrame;
            _rot = rot;
            _isCorrect = isCorrect;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
